#+TITLE: Doom config

* Table of Contents :TOC_3:
- [[#basic-settings][Basic settings]]
  - [[#daemon][Daemon]]
  - [[#environment][Environment]]
  - [[#fonts-and-scaling][Fonts and scaling]]
    - [[#ligatures][Ligatures]]
    - [[#input-method][Input Method]]
  - [[#line-numbers][Line numbers]]
  - [[#scrolling][Scrolling]]
  - [[#theming][Theming]]
  - [[#whitespace][Whitespace]]
- [[#keybindings][Keybindings]]
- [[#evil][Evil]]
  - [[#evil-surround][evil-surround]]
- [[#packages][Packages]]
  - [[#academic-phrases][Academic Phrases]]
  - [[#flycheck][Flycheck]]
  - [[#helpful][Helpful]]
  - [[#flyspell][Flyspell]]
  - [[#hl-todo][hl-todo]]
  - [[#hippie-expand][Hippie Expand]]
  - [[#ivycounsel][Ivy/Counsel]]
  - [[#languagetool][LanguageTool]]
  - [[#lsp][LSP]]
    - [[#lsp-mode][lsp-mode]]
    - [[#eglot][Eglot]]
  - [[#magit-and-diffing][Magit and diffing]]
    - [[#magit-delta][Magit Delta]]
  - [[#page-break-lines][Page break lines]]
  - [[#pdf-tools][PDF tools]]
  - [[#treemacs][Treemacs]]
  - [[#undo-fu][undo-fu]]
  - [[#wordnut][Wordnut]]
  - [[#vertico][Vertico]]
  - [[#vterm][Vterm]]
- [[#programming][Programming]]
  - [[#agda2][Agda2]]
  - [[#c][C#]]
  - [[#cc][CC]]
    - [[#meson-build-system][Meson build system]]
  - [[#configuration-files][Configuration files]]
  - [[#haskell][Haskell]]
  - [[#jupyter][Jupyter]]
  - [[#kotlin][Kotlin]]
  - [[#latex][LaTeX]]
  - [[#markdown][Markdown]]
  - [[#org][Org]]
  - [[#php][PHP]]
  - [[#python][Python]]
  - [[#rust][Rust]]
  - [[#sasscss][Sass/CSS]]
  - [[#shell-scripts][Shell scripts]]
  - [[#typescriptjavsscript][TypeScript/JavsScript]]
  - [[#vue][Vue]]
  - [[#web][Web]]
  - [[#writeroom-mode][writeroom-mode]]
  - [[#yaml][YAML]]

* Basic settings
** Daemon
Doom Emacs doesn't play along nicely with the noninteractive Emacs daemon, but
enabling the daemon in a running GUI process still allows you to open files from
the terminal in the current frame.

#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+end_src

** Environment
Doom doesn't load environment variables from a shell for performance reasons, so
we have to set the =PATH= variable ourselves since this is not always inherited
by Emacs:

#+begin_src emacs-lisp
(add-to-list 'exec-path "~/.local/bin")
(add-to-list 'exec-path "~/.cargo/bin")
#+end_src

** Fonts and scaling
My laptop has a HiDPI scree nand I prefer everything to be scaled up slightly
there. The =+scaling-ratio= setting is used in the [[Org][org-mode]] config.

#+begin_src emacs-lisp
(setq +scaling-ratio (pcase (system-name)
                       ("thinkpad" 1.75)
                       (_ 1.2))
      +font-size (pcase (system-name)
                   ("thinkpad" 13.5)
                   (_ 13.0))

      doom-font (font-spec :family "JetBrainsMono"
                           :size +font-size)
      doom-variable-pitch-font (font-spec :family "Roboto"
                                          :size +font-size))
#+end_src

*** Ligatures
These are the ligatures for the JetBrains Mono font. Since =composite.el= is
quite a new feature, I had to build this list myself. The format for this
ligature alist and the way that =composition-function-table= works, is that the
car for each cons cell is the first character of the ligature sequence, and the
cdr is a regexp that matches ligatures that starts with that character. If you
have a list of supported ligatures for a font, it's really easy to build these
regexps using the =regexp-opt= function.

#+begin_src emacs-lisp
(let ((alist '((?! . "\\(?:!\\(?:==\\|[!=]\\)\\)")
               (?# . "\\(?:#\\(?:###?\\|_(\\|[!#(:=?[_{]\\)\\)")
               (?$ . "\\(?:\\$>\\)")
               (?& . "\\(?:&&&?\\)")
               (?* . "\\(?:\\*\\(?:\\*\\*\\|[/>]\\)\\)")
               (?+ . "\\(?:\\+\\(?:\\+\\+\\|[+>]\\)\\)")
               (?- . "\\(?:-\\(?:-[>-]\\|<<\\|>>\\|[<>|~-]\\)\\)")
               (?. . "\\(?:\\.\\(?:\\.[.<]\\|[.=?-]\\)\\)")
               (?/ . "\\(?:/\\(?:\\*\\*\\|//\\|==\\|[*/=>]\\)\\)")
               (?: . "\\(?::\\(?:::\\|\\?>\\|[:<-?]\\)\\)")
               (?\; . "\\(?:;;\\)")
               (?< . "\\(?:<\\(?:!--\\|\\$>\\|\\*>\\|\\+>\\|-[<>|]\\|/>\\|<[<=-]\\|=\\(?:=>\\|[<=>|]\\)\\||\\(?:||::=\\|[>|]\\)\\|~[>~]\\|[$*+/:<=>|~-]\\)\\)")
               (?= . "\\(?:=\\(?:!=\\|/=\\|:=\\|=[=>]\\|>>\\|[=>]\\)\\)")
               (?> . "\\(?:>\\(?:=>\\|>[=>-]\\|[]:=-]\\)\\)")
               (?? . "\\(?:\\?[.:=?]\\)")
               (?\[ . "\\(?:\\[\\(?:||]\\|[<|]\\)\\)")
               (?\ . "\\(?:\\\\/?\\)")
               (?\] . "\\(?:]#\\)")
               (?^ . "\\(?:\\^=\\)")
               (?_ . "\\(?:_\\(?:|?_\\)\\)")
               (?{ . "\\(?:{|\\)")
               (?| . "\\(?:|\\(?:->\\|=>\\||\\(?:|>\\|[=>-]\\)\\|[]=>|}-]\\)\\)")
               (?~ . "\\(?:~\\(?:~>\\|[=>@~-]\\)\\)"))))
  (dolist (char-regexp alist)
    (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+end_src

*** Input Method

Emacs does some weird multilingual input character composing by default. This is
not needed because AltGr is a thing and it also makes it impossible to type a
quote followed by a vowel, so I just disable it.

#+begin_src emacs-lisp
(setq default-input-method nil)
#+end_src

** Line numbers
Relative line numbers are nice for vertical motions.

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

** Scrolling
Recenter when jumping to something off screen. This requires more resources but
it makes browsing code a lot easier.

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 3) ((control)))
      scroll-conservatively 3
      scroll-margin 3
      maximum-scroll-margin 0.2)

(setq-hook! 'term-mode-hook scroll-margin 0)
#+end_src

** Theming
Also increase the default frame size so that a typical document fits in the
default frame.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(height . 40))
(add-to-list 'default-frame-alist '(width . 120))

(setq doom-modeline-height 30
      nav-flash-delay 0.25
      which-key-idle-delay 0.4
      ;; The gray comments are hard to read in my terminal, although I rarely
      ;; use Emacs in a terminal
      doom-one-brighter-comments (not (or (display-graphic-p) (daemonp))))
#+end_src

** Whitespace
Show trailing whitespace. This got removed as a default.

#+begin_src emacs-lisp
(setq-default show-trailing-whitespace nil)

(add-hook! (prog-mode text-mode conf-mode)
  (defun doom-enable-show-trailing-whitespace-h ()
    (setq show-trailing-whitespace t)))
#+end_src

* Keybindings
Doom has changed its keybindings quite a bit over time. These keybindings
override the defaults and add back a few the keybindings Doom has removed over time.
The most important changes here are =M-f= and =M-F= to search to current buffer
or the whole project with =swiper= or ripgrep, and the newline keybindings are
overridden to not continue comments.

#+begin_src emacs-lisp
(map!
 ;; Doom's remaps `newline' to `newline-and-indent' and advices it to break
 ;; comments. It's nice to have the option, but I don't like it as a default.
 :i [remap newline] #'+robbert/newline-and-indent
 :i [C-S-return]    #'newline-and-indent
 :i [M-backspace]   #'evil-delete-back-to-indentation
 :g "M-f"           #'+default/search-buffer
 :g "M-F"           #'+default/search-project
 :gnvi "M-Q"        #'+robbert/unfill-paragraph
 :gni "C-S-SPC"     #'company-yasnippet

 ;; `next-error' and `previous-error' will keep cycling through the last used
 ;; error buffer. This also causes them to keep cycling through compilation
 ;; results or xref references, which is not what I typically want. Instead I'll
 ;; move them so I can use flycheck's error checking directly.
 :m "]e"            #'flycheck-next-error
 :m "[e"            #'flycheck-previous-error
 :m "]E"            #'next-error
 :m "[E"            #'previous-error

 (:leader
  (:prefix "b"
   :desc "Replace with clipboard" "P" #'+robbert/clipboard-to-buffer
   :desc "Copy to clipboard"      "Y" #'+robbert/buffer-to-clipboard)

  ;; These lookup bindings are missing, there's an open PR that will maek
  ;; similar changes
  (:prefix "c"
   :desc "Find implementations"    "i" #'+lookup/implementations
   :desc "Find type definitions"   "t" #'+lookup/type-definition)

  (:prefix "f"
   :desc "Find file in dotfiles"  "t" #'+robbert/find-in-dotfiles
   :desc "Browse dotfiles"        "T" #'+robbert/browse-dotfiles
   :desc "Find file externally"   "x" #'consult-file-externally)

  (:prefix "t"
   :desc "Change dictionary"      "S" #'ispell-change-dictionary)))
 #+end_src

Other mode-specific keybindings are bundled with that mode for ease of reading.

* Evil
I disable the default ~jk~ escape sequence since this sequence and most
sequences like it are pretty common in Dutch writing. There are some more
settings in =init.el=, as those have to be set before evil gets loaded.

#+begin_src emacs-lisp
(setq evil-escape-key-sequence nil
      evil-ex-substitute-global nil
      +evil-want-o/O-to-continue-comments nil)

(setq-default evil-symbol-word-search t)

;; Make `w' and `b' handle more like in vim
(add-hook 'after-change-major-mode-hook #'+robbert/fix-evil-words-underscore)
#+end_src

Package specific evil configuration such as that for Org and Magit is grouped
with the package.

** evil-surround
Add some more pairs commonly used in Org and LaTeX to evil-surround.

#+begin_src emacs-lisp
;; TODO: Check whether this still works
(after! evil-surround
  ;; Add evil-surround support for common markup symbols
  (dolist (pair '((?$ . ("$" . "$")) (?= . ("=" . "=")) (?~ . ("~" . "~"))
                  (?/ . ("/" . "/")) (?* . ("*" . "*")) (?* . (":" . ":"))))
    (push pair evil-surround-pairs-alist)))
#+end_src

* Packages
** Academic Phrases
#+begin_src emacs-lisp
(use-package! academic-phrases)
#+end_src

** Flycheck
Revert the change made to when flycheck checkers are run. Since LSP is now used
for most expensive checks anyways, running these a bit more often than strictly
necessary won't cause an issue. Deferring checks to save also breaks diagnostics
from LSP.

#+begin_src emacs-lisp
(after! flycheck
  (setq flycheck-check-syntax-automatically '(save idle-change new-line mode-enabled)))

(map!
 (:after flycheck
   (:map flycheck-error-list-mode-map
     :m [M-return] #'flycheck-error-list-explain-erro)))
#+end_src

** Helpful
Increase the size of help popups to match Ivy's height.

#+begin_src emacs-lisp
(set-popup-rule! "^\\*Help" :size 0.3 :select t)
#+end_src

** Flyspell
Add spell checking to all text documents.

#+begin_src emacs-lisp
(setq flyspell-default-dictionary "english")

(add-hook 'text-mode-hook 'flyspell-mode)
#+end_src

** hl-todo
Also highlight TODOs in text documents.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook #'hl-todo-mode)
#+end_src

** Hippie Expand
Hippie Expand is really useful, but it comes with quite a few redundant or error
prone completion functions enabled by default.

#+begin_src emacs-lisp
(setq hippie-expand-try-functions-list
      '(try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-line
        try-expand-dabbrev-visible
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))

(after! yasnippet
  (add-to-list 'hippie-expand-try-functions-list 'yas-hippie-try-expand))

(map! [remap dabbrev-expand] #'hippie-expand)
#+end_src

** Ivy/Counsel
#+begin_src emacs-lisp
(map!
 (:after ivy
  (setq completion-styles '(partial-completion initials)
        confirm-nonexistent-file-or-buffer nil)

  (:map ivy-minibuffer-map
   "C-d" #'ivy-scroll-up-command
   "C-u" #'ivy-scroll-down-command)))
#+end_src

Change the filtering order to include fuzzy matches, but to order them last. The
default with =+fuzzy= is ='(literal regexp initialism fuzzy)= which would cause
fuzzy matches to appear first and literal matches to appear last, which is the
exact opposite of what I want.

#+begin_src emacs-lisp
(after! ivy-prescient
  (setq prescient-filter-method '(literal regexp fuzzy)))
#+end_src

** LanguageTool
Using LanguageTool inside of a structured text document such as LaTeX, Org or
Markdown you will get lots of whitespace related lints, so I just disable that
rule from the start. The keybindigns don't make a lot of sense, but they're easy
to use and not in use for anything else.

#+begin_src emacs-lisp
(after! langtool
  (setq langtool-disabled-rules '("WHITESPACE_RULE")
        langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"))

(map!
 :m "[v" #'+robbert/languagetool-previous-error
 :m "]v" #'+robbert/languagetool-next-error

 (:leader
   (:prefix "t"
     :desc "LanguageTool"         "t" #'+robbert/languagetool-toggle
     :desc "LanguageTool correct" "T" #'langtool-correct-buffer)))
#+end_src

** LSP
*** lsp-mode
Right now for some reason yasnippet kind of overshadows the completions provided
by the LSP server, so we'll just disable those for now. ~C-S-Spc~ brings those
up anyways.

#+begin_src emacs-lisp
(setq +lsp-company-backends 'company-capf)
#+end_src

=lsp-ui='s peek functionality is pretty cool, but it's missing default evil
bindings.

#+begin_src emacs-lisp
;; HACK: lsp-mode's flycheck integration got moved to `lsp-diagnostics', but
;;       the`actual checker is only created after lsp-mode is enabled. Because
;;       of this we can't use `flycheck-add-next-checker'.
;; FIXME: There's now a native way to do this
(defadvice! +robbert--lsp-flycheck-chain-a (&rest _)
  "Chain other checkers after lsp-mode's flycheck checker. Needed
  because the checker is created on demand."
  :after #'lsp-diagnostics-flycheck-enable
  ;; TODO: CHeck whether hls's hlint plugin works now
  ;; (flycheck-add-next-checker 'lsp '(warning . haskell-hlint))
  (flycheck-add-next-checker 'lsp '(warning . python-flake8))
  (flycheck-add-next-checker 'lsp '(warning . tex-chktex))
  (flycheck-add-next-checker 'lsp '(warning . sh-shellcheck)))

(after! lsp-mode
  ;; Don't highlight symbols automatically, I'll use `gh' to do this manually
  (setq lsp-enable-symbol-highlighting nil)

  ;; Ignore build artifact directories used in Meson projects
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]build$")
  ;; And output generated by Doxygen
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]html$")
  ;; Used by Cabal, I sometimes use multiple dist-newstyle directories to
  ;; quickly switch between configurations
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]dist-newstyle[^/\\\\]*$")

  ;; Doom disables a few LSP features by default, but some of them can be quite
  ;; useful especially in C++
  (setq lsp-enable-text-document-color t
        lsp-enable-semantic-highlighting t
        lsp-enable-file-watchers t
        ;; Not sure if these two are actually used and, if they are, what they
        ;; are used for. Might disable them later
        lsp-enable-indentation t
        lsp-enable-on-type-formatting t
        lsp-enable-folding t))

(after! lsp-ui
  ;; These tend to get in the way when I'm just looking at stuff. K also opens a
  ;; documentation popup.
  (setq lsp-ui-doc-enable nil))

(map!
 (:after lsp-mode
  (:map lsp-mode-map
   :nvi [M-return] #'lsp-execute-code-action
   :nv  "gh"       #'lsp-document-highlight)

  ;; TODO: Make sure these are not overwriting anything else
  (:map evilem-map
   "l"             #'lsp-avy-lens)
  (:map lsp-command-map
   "l"             #'lsp-lens-mode))
 (:after lsp-ui
  (:map lsp-ui-peek-mode-map
   [tab]           #'lsp-ui-peek--toggle-file
   "j"             #'lsp-ui-peek--select-next
   "C-j"           #'lsp-ui-peek--select-next
   "k"             #'lsp-ui-peek--select-prev
   "C-k"           #'lsp-ui-peek--select-prev
   "l"             #'lsp-ui-peek--goto-xref
   "C-l"           #'lsp-ui-peek--goto-xref
   "J"             #'lsp-ui-peek--select-next-file
   "K"             #'lsp-ui-peek--select-prev-file)))
#+end_src

Doom enables this for some reason, but this would cause lenses to appear
duplicated (not that lenses in lsp-mode work that well atm in the first place).

#+begin_src emacs-lisp
(after! ccls
  (remove-hook 'lsp-lens-mode-hook #'ccls-code-lens-mode))
#+end_src

Disable the default clang linting since this would be duplicate behavior and it
also doesn't use the compilation database.

#+begin_src emacs-lisp
(setq-hook! '(eglot--managed-mode-hook lsp-managed-mode-hook)
  flycheck-disabled-checkers '(c/c++-clang
                               ;; NOTE: Without disabling this, clangd will
                               ;;       crash all the time when completing
                               ;;       things from the `std` namespace
                               c/c++-gcc
                               haskell-ghc
                               haskell-stack-ghc
                               python-mypy
                               python-pylint))
#+end_src

*** Eglot
All other LSP related config is for lsp-mode. I found eglot a bit too bare bones
when I tried using it a few years ago, but I'm giving it a shot again now that
flymake integrates with flycheck.

#+begin_src emacs-lisp
;; Disable highlighting on hover
(setq eglot-ignored-server-capabilites '(:documentHighlightProvider))
#+end_src

Use the Microsoft Python Language server. mspyls requires some settings to be
set for it to work properly, even though the defaults should be obvious.

#+begin_src emacs-lisp
(after! eglot
  ;; Snippet taken from https://github.com/joaotavora/eglot/issues/144#issuecomment-557229445

  (defclass eglot-mspyls (eglot-lsp-server) ()
    :documentation "MS Python Language Server.")

  (setq-default eglot-workspace-configuration
                '((:python
                   :autoComplete (:extraPaths nil)
                   :analysis (:autoSearchPaths :json-false :usePYTHONPATH :json-false))))

  (cl-defmethod eglot-initialization-options ((_server eglot-mspyls))
    `(:interpreter
      (:properties
       (:InterpreterPath "/usr/bin/python3"))
      :searchPaths []))

  (add-to-list 'eglot-server-programs
               `(python-mode eglot-mspyls "mspyls")))
#+end_src

** Magit and diffing
Magit can do word diffs. This is disabled by default since it is very slow, but
it makes reading diffs a lot easier. I also disable commits starting in insert
mode since this conflicts with years of muscle memory.

#+begin_src emacs-lisp
(after! ediff
  ;; Ancestor is already shown in buffer C
  (setq ediff-show-ancestor nil))

(after! magit
  (remove-hook 'git-commit-setup-hook #'+vc-start-in-insert-state-maybe-h))

(after! magit-todos
  ;; Ignore concatenated/minified files when searching for todos
  (setq magit-todos-rg-extra-args '("-M 512")))

(map!
 (:after diff-mode
  (:map diff-mode-map
   :nm "{" #'diff-hunk-prev
   :nm "}" #'diff-hunk-next)))
#+end_src

Doom now overrides magit's splitting behaviour again, and the default left-split
is unusable for me unless I run Emacs full screen.

#+begin_src emacs-lisp
(setq +magit-open-windows-in-direction 'down)
#+end_src

*** TODO Magit Delta
Remove after merged upstream.

#+begin_src emacs-lisp
(use-package! magit-delta
  :after magit
  :config
  (setq magit-delta-default-dark-theme "Nord"
        magit-delta-default-light-theme "OneHalfLight")
  (magit-delta-mode))
#+end_src

** Page break lines
Transforms =^L= characters used in elisp into horizontal lines.

#+begin_src emacs-lisp
(use-package! page-break-lines
  :config
  (add-hook! '(emacs-lisp-mode-hook view-mode-hook) 'page-break-lines-mode))
#+end_src

** PDF tools
#+begin_src emacs-lisp
;; Auto reload PDFs
(add-hook 'doc-view-mode-hook #'auto-revert-mode)
#+end_src

** Treemacs
Highlight directories based on git status

#+begin_src emacs-lisp
(setq +treemacs-git-mode 'deferred)
#+end_src

** undo-fu
Allow undos adn redos within the selected region.

#+begin_src emacs-lisp
(after! undo-fu
  (setq undo-fu-allow-undo-in-region t))
#+end_src

** Wordnut
#+begin_src emacs-lisp
(after! wordnut
  (set-popup-rule! "^\\*WordNut\\*$" :size 0.3 :select t))
#+end_src

** Vertico
Why is there no default keybinding for this?

#+begin_src emacs-lisp
(map!
 (:after vertico
  (:map vertico-map
   "C-d" #'vertico-scroll-up
   "C-u" #'vertico-scroll-down)))

(after! vertico
  ;; Doom uses a regexp that matches both spaces and ampersands, but with no way
  ;; to escape those
  (setq orderless-component-separator 'orderless-escapable-split-on-space))
#+end_src

Stripping project roots makes the buffer list look a bit less cluttered. We'll
only do this for files within the current project.

#+begin_src emacs-lisp
(defadvice! +robbert--strip-project-root-a (fn &rest args)
  :around #'marginalia--buffer-file
  (let ((buffer-path (apply fn args)))

    ;; For readability's sake, we want to either strip the current project's
    ;; root, or abbreviate leading directories in long paths outside of this
    ;; project. And we should of course not change anything when we're not
    ;; dealing with file backed buffers.
    (if (and (not (string-empty-p buffer-path)) (file-exists-p buffer-path))
        (if-let* ((absolute-root (marginalia--project-root))
                  (project-root (abbreviate-file-name absolute-root))
                  (is-prefix (string-prefix-p project-root buffer-path)))
            (string-remove-prefix project-root buffer-path)
          (shrink-path-file buffer-path))
      buffer-path)))
#+end_src

** Vterm
Disable cursor blinking in =vterm-mode=. This is not needed and it persists
after the terminal closes.

#+begin_src emacs-lisp
(add-hook! 'vterm-mode-hook
  (defun +robbert-disable-vterm-blinking-h ()
    (blink-cursor-mode -1)))
#+end_src

* Programming
** Agda2
#+begin_src emacs-lisp
(after! agda2-mode
  (set-lookup-handlers! 'agda2-mode :definition #'agda2-goto-definition-keyboard)

  (map! :map agda2-mode-map
        "C-c w" #'+robbert/agda-insert-with

        (:localleader
          :desc "Insert 'with'" "w" #'+robbert/agda-insert-with)))
#+end_src

** C#
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.csproj$" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.ruleset$" . nxml-mode))

(after! csharp-mode
  (set-electric! 'csharp-mode :chars '(?\n ?\{)))

(after! omnisharp
  ;; Killing the omnisharp server doesn't work as well when constantly switching
  ;; branches and previewing files
  (add-hook! 'csharp-mode-hook :append
    (defun +robbert-dont-stop-omnisharp-h ()
      (remove-hook 'kill-buffer-hook #'omnisharp-stop-server t) ))

  (map! :map omnisharp-mode-map
        :nv [M-return]                 #'omnisharp-run-code-action-refactoring

        (:localleader
          :desc "Refactor this"  "SPC" #'omnisharp-run-code-action-refactoring
          :desc "Restart server" "s"   #'omnisharp-start-omnisharp-server)) )
#+end_src

** CC
Use C++ as a default.

#+begin_src emacs-lisp
(setq +cc-default-header-file-mode 'c++-mode)

(setq-hook! '(c-mode-hook c++-mode-hook) c-basic-offset 4)

;; Match the Chromium clang-format style
(add-hook! '(c-mode-hook c++-mode-hook) :append
  (add-to-list 'c-offsets-alist '(innamespace . 0))
  (add-to-list 'c-offsets-alist '(access-label . /))
  (add-to-list 'c-offsets-alist '(inclass . +)))

(setq lsp-clients-clangd-args '("-j=6"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=never"
                                "--header-insertion-decorators=0"))
#+end_src

=projectile-find-other-file= isn't very useful when multiple header and
implementation files have the same file name.

#+begin_src emacs-lisp
(map! :map (c-mode-map c++-mode-map)
      :localleader
      "o" #'lsp-clangd-find-other-file)
#+end_src

*** Meson build system
#+begin_src emacs-lisp
(use-package! meson-mode
  :mode "/meson\\(\\.build\\|_options\\.txt\\)\\'")
#+end_src

** Configuration files
Systemd and other software use standard conf file syntax, but Emacs doesn't know
about this by default since it can't infer it from the filename or the contents
of the files.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.service$" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.socket$" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.target$" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("index\\.theme$" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.timer$" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.wrap$" . conf-unix-mode))
#+end_src

** Haskell
#+begin_src emacs-lisp
(after! haskell-mode
  ;; (set-formatter! 'hindent '("hindent") :modes '(haskell-mode literate-haskell-mode))
  (add-to-list '+format-on-save-enabled-modes 'haskell-mode t)

  ;; Improve code navigation in Haskell buffers
  (add-hook 'haskell-mode-hook #'haskell-decl-scan-mode)
  (add-hook 'haskell-mode-hook #'haskell-indentation-mode)
  (setq-hook! 'haskell-mode-hook
    outline-regexp "-- \\*+"
    ;; `haskell-mode' sets the default tab width to eight spaces for some reason
    tab-width 2)

  (map! :map haskell-mode-map
        ;; Doom now also provides something similar, but this works better
        :n "o"                  nil
        :n "O"                  nil
        [remap evil-open-above] #'+robbert/haskell-evil-open-above
        [remap evil-open-below] #'+robbert/haskell-evil-open-below))

(setq lsp-haskell-formatting-provider "brittany")
#+end_src

Some Haskell preprocessors such as Happy, Alex and uuagc use haskell-like syntax
with a few additions. For these files it's useful to have most of the
functionality of haskell-mode available.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.ag$" . +robbert/basic-haskell-mode))
#+end_src

** Jupyter
By default ein expects you to store all of your notebooks in a single directory,
but I just jupyter for lots of different projects so that doesn't work for me.

#+begin_src emacs-lisp
(after! ein
  (setq ein:jupyter-default-notebook-directory nil
        ein:slice-image '(10 nil)))

(map!
 (:after ein-multilang
   (:map ein:notebook-multilang-mode-map
     :ni  [C-return] #'ein:worksheet-execute-cell
     :ni  [S-return] #'ein:worksheet-execute-cell-and-goto-next
     :nvi [backtab]  #'ein:pytools-request-tooltip-or-help
     :n   "gj"       #'ein:worksheet-goto-next-input
     :n   "gk"       #'ein:worksheet-goto-prev-input
     :nv  "M-j"      #'ein:worksheet-move-cell-down
     :nv  "M-k"      #'ein:worksheet-move-cell-up
     :nv  "C-s"      #'ein:notebook-save-notebook-command
     (:localleader
       "y" #'ein:worksheet-copy-cell
       "p" #'ein:worksheet-yank-cell
       "d" #'ein:worksheet-kill-cell)))

 (:after ein-traceback
   (:map ein:traceback-mode-map
     (:localleader
       "RET" #'ein:tb-jump-to-source-at-point-command
       "n"   #'ein:tb-next-item
       "p"   #'ein:tb-prev-item
       "q"   #'bury-buffer)))

 (:leader
   (:prefix "o"
     (:prefix-map ("j" . "jupyter")
       :desc "Open in browser" "b" #'ein:notebook-open-in-browser
       :desc "Open this file"  "f" #'ein:notebooklist-open-notebook-by-file-name
       :desc "Login and open"  "o" #'ein:jupyter-server-login-and-open
       :desc "Start server"    "s" #'ein:jupyter-server-start))))
#+end_src

** Kotlin
#+begin_src emacs-lisp
(use-package! kotlin-mode)
#+end_src

** LaTeX
#+begin_src emacs-lisp
(after! latex-mode
  (set-electric! 'latex-mode :chars '(?\n ?\{)))
#+end_src

** Markdown
Disable trailing whitespace stripping for Markdown mode since this conflicts
with explicit line breaks (i.e. two spaces at the end of a line).

#+begin_src emacs-lisp
(after! markdown-mode
  (add-hook 'markdown-mode-hook #'doom-disable-delete-trailing-whitespace-h))
#+end_src

** Org
Org's default LaTeX and PDF exports are a bit barebones. This enables a lot of
functionality I use in most of my LaTeX documents, including proper syntax
highlighting.

#+begin_src emacs-lisp
(setq org-directory (expand-file-name "~/Documenten/notes/"))

(after! org
  (setq org-export-with-smart-quotes t
        org-imenu-depth 3
        org-highlight-latex-and-related '(latex script entities))

  (set-face-attribute
   'org-todo nil :foreground (doom-darken (face-foreground 'org-todo) 0.2))

  ;; Org mode should use komascript for LaTeX exports and code fragments should be colored
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("koma-article"
                   "\\documentclass[parskip=half]{scrartcl}
                    [DEFAULT-PACKAGES] [PACKAGES]
                    \\setminted{frame=leftline,framesep=1em,linenos,numbersep=1em,style=friendly}
                    \\setminted[python]{python3}
                    [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-packages-alist '("english" "babel"))
    (add-to-list 'org-latex-packages-alist '("newfloat" "minted"))
    (setq org-latex-default-class "koma-article"
          org-format-latex-options
          (plist-put org-format-latex-options
                     :scale (* 1.25 +scaling-ratio))
          org-latex-caption-above nil
          org-latex-listings 'minted
          ;; latexmk tends to play along nicer than pdflatex
          org-latex-pdf-process '("latexmk -f -pdf %f"))))

(after! evil-org
  (setq evil-org-use-additional-insert t)
  (add-to-list 'evil-org-key-theme 'additional)
  (evil-org--populate-additional-bindings)

  (map! :map evil-org-mode-map
        ;; Doom changes c-return to always create new list items when inside of a
        ;; list, but M-return already does this so I prefer the old behaviour
        [C-return] (evil-org-define-eol-command org-insert-heading-respect-content)
        :ni [M-return] #'+robbert/evil-org-always-open-below))
#+end_src

Doom also supports exporting Org documents using Pandoc. This enables LaTeX math
notation in all exported documents.

#+begin_src emacs-lisp
(after! ox-pandoc
  ;; Doom explicitely adds the deprecated `parse-raw' option
  (setq org-pandoc-options '((standalone . t) (mathjax . t))))
#+end_src

** PHP
The standard should be set either through a configuration file or globally using
=phpcs --config-set default_standard psr2= to ensure that flymake and phpcbf use
the same standard.

#+begin_src emacs-lisp
;; (use-package! phpcbf
;;   :config
;;   (set-formatter! 'php-mode #'phpcbf))
#+end_src

** Python
Python offers some nicer ways to work with REPLs. Also change the defaults to
make electric indent less aggressive.

#+begin_src emacs-lisp
(setq-hook! 'python-mode-hook fill-column 79)

(add-to-list 'auto-mode-alist '("Pipfile$" . conf-toml-mode))
(add-to-list 'auto-mode-alist '("Pipfile\\.lock$" . json-mode))

(setq lsp-python-ms-nupkg-channel "daily")
(after! lsp-mode
  ;; FIXME: This doesn't work, and lsp-pyright will probably add something
  ;;        similar sooner pr ;ater
  (defvar +robbert/lsp-pyright-report-missing-type-stubs t)
  (lsp-register-custom-settings
   `(("pyright.reportMissingTypeStubs" +robbert/lsp-pyright-report-missing-type-stubs t))))

;; mypy is automaitcally run after flake8, this doesn't work with virtualenvs
;; without installing mypy to that virtualenv so I'll just disable it by
;; default
(setq-hook! 'python-mode-hook flycheck-disabled-checkers '(python-mypy python-pylint))
(add-hook 'python-mode-hook #'rainbow-delimiters-mode)
(after! python
  ;; Set this to `django' to force docstring to always be on multiple lines
  (setq python-fill-docstring-style 'onetwo)

  ;; Electric indent on `:' only really works for `else' clauses and makes
  ;; defining functions a lot harder than it should be
  (set-electric! 'python-mode ':words '("else:"))
  ;; FIXME: The above doesn't clear the list of electric indent characters
  ;;        anymore
  (setq-hook! 'python-mode-hook electric-indent-chars '())
  ;; Disable the default template, as we don't need a hashbang in every Python
  ;; file
  (set-file-template! 'python-mode :ignore t)

  (map! :map python-mode-map
        (:localleader
          (:prefix ("r" . "REPL send")
            :desc "Buffer"   "b" #'python-shell-send-buffer
            :desc "Function" "f" #'python-shell-send-defun
            :desc "Region"   "r" #'python-shell-send-region))))
#+end_src

** Rust
#+begin_src emacs-lisp
(setq-hook! 'rustic-mode-hook fill-column 100)
(add-hook 'rustic-mode-hook #'rainbow-delimiters-mode)

(setq rustic-indent-offset 4)
#+end_src

Enable clippy support and enable rust-analyzer.

#+begin_src emacs-lisp
(setq rustic-lsp-server 'rust-analyzer
      lsp-rust-clippy-preference "on")
#+end_src

** Sass/CSS
#+begin_src emacs-lisp
(setq css-indent-offset 2)

(after! css-mode
  (set-electric! 'css-mode :chars '(?})))
#+end_src

GNU Global is an easy way to hack function and mixin completion into
=scss-mode=. We only need it for Sass so all setup is done here.

#+begin_src emacs-lisp
(use-package! ggtags
  :commands (ggtags-find-tag-dwim ggtags-find-reference ggtags-mode)
  :hook (scss-mode . ggtags-mode)
  :config
  ;; Sort global results by nearness. This helps when editing Sass, as the
  ;; default variables will have a lower priority.
  (setq ggtags-sort-by-nearness t)

  ;; Fix gtags for Sass. Pygments has got a parser that works great, but it
  ;; doesn't use the dollar sign prefix. We'll have to manually add the jump
  ;; handler to scss-mode as there are not any yet.
  (add-hook! 'scss-mode-hook
    (defun +robbert-fix-scss-syntax-table-h ()
      (modify-syntax-entry ?$ "'") (modify-syntax-entry ?% ".")))

  ;; Completion is handled through `company-capf', though for scss in particular
  ;; we just want to use tags together with the lsp server as the built in
  ;; support misses a lot of variables
  (set-lookup-handlers! 'ggtags-mode
    :definition #'ggtags-find-tag-dwim
    :references #'ggtags-find-reference))

;; We can't apply our configuration in a simple hook as lsp-mode gets loaded
;; asynchronously
(add-hook! 'lsp-managed-mode-hook :append
  (defun +robbert-lsp-scss-gtags-sestup-h ()
    (cond ((derived-mode-p 'scss-mode)
           ;; `lsp-mode' overrides our tags here, but we need those for variable
           ;; name completions as `lsp-css' isn't that smart yet
           (setq ;; lsp-css's auto completion returns so many results that
                 ;; company struggles to keep up
                 company-idle-delay 0.3
                 completion-at-point-functions '(ggtags-completion-at-point lsp-completion-at-point))))))

(map! :map scss-mode-map
      (:localleader
        :desc "Generate tags" "t" #'+robbert/generate-scss-tags))
#+end_src

Allow jumping to stylesheets inside of =node_modules=:

#+begin_src emacs-lisp
;; TODO: Refactor this to use the new `+lookup/file' function
(require 'ffap)
(add-to-list 'ffap-alist '(scss-mode . +robbert/scss-find-file))
#+end_src

** Shell scripts
#+begin_src emacs-lisp
(setq sh-basic-offset 2)

(after! fish-mode
  (set-electric! 'fish-mode :words '("else" "end")))
#+end_src

Override shfmt to use two spaces instead of tabs:

#+begin_src emacs-lisp
(after! format-all
  (set-formatter! 'shfmt
    '("shfmt"
      "-i" "2"
      ;; Mode selection copied from the default config
      ("-ln" "%s" (cl-case (and (boundp 'sh-shell) (symbol-value 'sh-shell))
                    (bash "bash") (mksh "mksh") (t "posix"))))
    :modes 'sh-mode))
#+end_src

** TypeScript/JavsScript
#+begin_src emacs-lisp
(setq js-indent-level 2
      typescript-indent-level 2)

(map!
 (:after tide
   (:map tide-mode-map
     :nv [M-return] #'tide-fix
     (:localleader
       :desc "JSDoc template" "c"   #'tide-jsdoc-template
       :desc "Restart"        "s"   #'tide-restart-server
       :desc "Fix issue"      "RET" #'tide-fix
       :desc "Refactor..."    "SPC" #'tide-refactor))))
#+end_src

** Vue
#+begin_src emacs-lisp
(use-package! vue-mode
  :hook (vue-mode-local-vars . lsp!))

(setq lsp-vetur-format-default-formatter-html "prettier")
#+end_src

** Web
Prevent self-closing HTML elements from getting an XML-style closing slash.
There are a lot of snippets included with yasnippet that override emmemt's
behaviour, so we try our best to remove them.

#+begin_src emacs-lisp
(after! emmet-mode
  (setq emmet-self-closing-tag-style ""))

(after! (yasnippet web-mode)
  (remhash 'web-mode yas--parents))
#+end_src

lsp-mode doesn't know about =.twig= files.

#+begin_src emacs-lisp
(after! lsp-mode
  (add-to-list 'lsp-language-id-configuration '(".*\\.twig$" . "html")))
#+end_src

Editorconfig tries to be helpful and force =web-mode= to exactly follow the
style defined in =.editorconfig=, but this makes indented attribute lists look
weird.

#+begin_src emacs-lisp
(setq web-mode-markup-indent-offset 2
      web-mode-code-indent-offset 2
      web-mode-css-indent-offset 2
      web-mode-comment-style 2)

(after! web-mode
  ;; Make sure that attributes are indented when breaking lines (e.g. long lists
  ;; of classes)
  (set-electric! 'web-mode :chars '(?\<) :words '("endfor" "endif" "endblock"))

  ;; Editorconfig tells web-mode to indent attributes instead of aligning
  (add-hook! 'web-mode-hook :append
    (defun +robbert-undo-editorconfig-web-overrides-h ()
      (setq web-mode-attr-indent-offset nil
            web-mode-attr-value-indent-offset nil
            web-mode-block-padding 0))))

(map!
 (:after emmet-mode
  (:map emmet-mode-keymap
   :i [backtab] #'emmet-expand-line))

 (:after web-mode
  (:map web-mode-map
   "M-/" nil

   ;; In HTML we DO want to automatically indent broken 'strings', as these
   ;; are likely long attributes like a list of classes
   [remap newline] #'+robbert/newline-and-indent-always)))
#+end_src

** writeroom-mode
Doom increases the font size by default. And even though I appreciate a larger
font size, I'd rather keep everything consistent and just increase the font size
manually if needed.

#+begin_src emacs-lisp
(setq +zen-text-scale 0)
#+end_src

** YAML
Don't autoformat yaml files since these files are very complicated and
formatting almost always breaks something.

#+begin_src emacs-lisp
(add-to-list '+format-on-save-enabled-modes 'yaml-mode t)
#+end_src
