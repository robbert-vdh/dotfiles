#!/usr/bin/env -S ghci -haddock -x hs

{-# LANGUAGE ImplicitParams  #-}
{-# LANGUAGE ConstraintKinds #-}
{-# OPTIONS_GHC -Wall -Wextra #-}

-- | This module is meant to be run interactively in GHCI and it simply
-- calculates ratios for coffee recipes.
module Recipes where

type Grounds = Float
type Ratio   = Float
type Water   = Int

-- | Based on <https://www.vibrantcoffeeroasters.com/pages/v60-brew-guide>.
vibrant :: Grounds -> Ratio -> [Water]
vibrant grounds ratio =
  let ?grounds       = grounds
      ?ratio         = ratio
      ?recipeGrounds = 21
      ?recipeRatio   = 374 / 21
   in scaleGrounds [?recipeGrounds * 3, scaled 215, scaled 374]

-- This could be a special monad, but a shallow DSL like this is exactly what
-- implicit parameters are good for.
type RecipeParams =
  ( ?grounds       :: Grounds
  , ?ratio         :: Ratio
  , ?recipeGrounds :: Grounds
  , ?recipeRatio   :: Ratio)

scaleGrounds :: RecipeParams => [Float] -> [Water]
scaleGrounds = map (round . (* ?grounds) . (/ ?recipeGrounds))

scaled :: RecipeParams => Float -> Float
scaled x = x / ?recipeRatio * ?ratio
