#!/usr/bin/env python3
"""Check and highlight both repo and AUR updates."""

import re
import subprocess
from termcolor import colored


def get_aur_updates():
    helpers = [["paru", "--aur", "-Qu"], ["yay", "--aur", "-Pu"]]

    for helper in helpers:
        try:
            return subprocess.run(
                helper, stdout=subprocess.PIPE, encoding="ascii"
            ).stdout
        except FileNotFoundError:
            pass

    raise RuntimeError("No supported AUR helper found")


aur_updates = get_aur_updates()
repo_updates = subprocess.run(
    ["/usr/bin/checkupdates"], stdout=subprocess.PIPE, encoding="ascii"
).stdout

STRIP_ANSI_CODES_RE = re.compile(r"\x1b\[[^\x1b]*?m")

# When comparing versions we only want to look at significant upgrades. This
# simply filters out revisions and dates.
MAJOR_MINOR_VERSION_RE = re.compile(
    r"""
    ^((?:\d+[.:])*) # Major-minor versions and epochs
    [^-]+           # Revision, date or other version information
    -.+$            # Package revision
    """,
    re.IGNORECASE | re.VERBOSE,
)

# Upgrading these packages might break things, so we'll highlight them
# separately. Manjaro calls the NVIDIA driver `linuxXXX-nvidia`, so we have to
# use a regexp here.
SPECIAL_PACKAGES_RE = re.compile(r"^(linux(\d*(-nvidia)?)?|nvidia)$")


def highlight_upgrades(diff):
    """Highlight major/minor version upgrades and special packages."""

    # The AUR updates already contain ANSI color codes, which have to be stripped first
    diff = STRIP_ANSI_CODES_RE.sub("", diff)

    output = []
    for line in diff.splitlines():
        # Paru suffixes ignored packages with ` (ignored)`
        name, old_version, _, new_version, *_ = line.split(" ")
        old_mm = MAJOR_MINOR_VERSION_RE.match(old_version)[1]
        new_mm = MAJOR_MINOR_VERSION_RE.match(new_version)[1]

        format_attrs = ["bold"] if SPECIAL_PACKAGES_RE.match(name) else []
        format_color = "green" if old_mm != new_mm else None

        output.append(colored(line, format_color, attrs=format_attrs))

    return "\n".join(output)


if repo_updates:
    print(highlight_upgrades(repo_updates))

if aur_updates:
    print(f"\n{colored('Aur updates', attrs=['bold'])}:")
    print(highlight_upgrades(aur_updates))
