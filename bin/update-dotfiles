#!/usr/bin/env bash
#
# All additional arguments are passed to `home-manager switch`.

set -euo pipefail

if ! command -v home-manager >/dev/null; then
    echo >&2 "This script uses home-manager to set everything up. If you don't know what that is, then you'll probably want to look at the individual config files instead."
    exit 1
fi

# Home Manager looks in `~/.config/home-manager` by default. Since the main
# `flake.nix` file is at this repo's root, we'll just tell it to use that
# instead of moving the config to `~/.config/home-manager`.
repo_root=$(dirname "$(dirname "$0")")

# We'll also need to tell Nix to use our nix.conf file specifically, or flakes won't be enabled
nix_conf_dir=$repo_root/modules/nix
if [[ ! -d $nix_conf_dir ]]; then
    echo >&2 "Couldn't find the Nix config file directory, this is an issue with this script"
    exit 1
fi

# Make sure everything is up to date and that there are no untracked files in
# the modules directory. Those won't be included in the flake which can result
# in difficult to understand errors.
last_fetch_timestamp=$(stat -c %Y "$repo_root/.git/FETCH_HEAD")
current_timestamp=$(date +%s)
if [[ $((current_timestamp - last_fetch_timestamp)) -gt 3600 ]]; then
    # This is only done once per hour to avoid unnecessary delays when iterating
    # on the Home Manager config
    git -C "$repo_root" pull
fi

modules_path="$repo_root/modules"
untracked_module_files=$(git -C "$repo_root" ls-files "$modules_path" --exclude-standard --others)
if [[ -n $untracked_module_files ]]; then
    echo >&2 "'$modules_path' contains untracked files. These must be 'git add'ed first:"
    echo >&2 -e "$untracked_module_files"
    exit 1
fi

export DOTFILES_DIR=$repo_root
export NIX_CONF_DIR=$nix_conf_dir

nproc=$(nproc)
home-manager --flake "$repo_root" --impure -j "$nproc" --cores "$nproc" switch "$@"
